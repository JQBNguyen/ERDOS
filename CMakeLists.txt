cmake_minimum_required(VERSION 3.18)
project(ERDOS)

set(CMAKE_CXX_STANDARD 20)

if(APPLE)
    message(STATUS, "Apple")
    set(OpenMP_C_FLAGS "-Xclang -fopenmp -I/usr/local/opt/libomp/include")
    set(OpenMP_CXX_FLAGS "-Xclang -fopenmp -I/usr/local/opt/libomp/include")
    set(OpenMP_C_LIB_NAMES "omp")
    set(OpenMP_CXX_LIB_NAMES "omp")
    set(OpenMP_omp_LIBRARY "/usr/local/opt/libomp/lib/libomp.dylib")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/usr/local/opt/libomp/include")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -I/usr/local/opt/libomp/include")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/opt/libomp/lib")
endif()

message(STATUS, "Compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS, "Compiler ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS, "Flags: ${CMAKE_CXX_FLAGS}")

find_package(OpenMP)

add_executable(ERDOS erdos.cpp bb_covering_tree.cpp cc_embedded_graph.cpp edgecode.cpp find_a_trail.cpp make_cc.cpp ply_to_embedding.cpp)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    message(STATUS, "GNU/CLANG")
    if(OpenMP_CXX_FOUND)
        message(STATUS, "Found OpenMP")
        target_compile_options(ERDOS PRIVATE ${OpenMP_CXX_FLAGS})
        target_link_libraries(ERDOS PRIVATE OpenMP::OpenMP_CXX)
        target_compile_definitions(ERDOS PRIVATE USE_OPENMP)
    else()
        message(STATUS, "Did not find OpenMP")
    endif()
endif()

if(MSVC)
    message(STATUS, "MSVC")
    if(OpenMP_CXX_FOUND)
        target_compile_options(ERDOS PRIVATE ${OpenMP_CXX_FLAGS})
        target_link_libraries(ERDOS PRIVATE OpenMP::OpenMP_CXX)
    else()
        target_compile_options(ERDOS PRIVATE /openmp)
        target_link_libraries(ERDOS PRIVATE legacy_stdio_definitions)
    endif()
    target_compile_definitions(ERDOS PRIVATE USE_OPENMP)
endif()

if(WIN32 AND NOT MSVC)
    message(STATUS, "MINGW")
    target_compile_options(ERDOS PRIVATE -fopenmp)
    target_link_options(ERDOS PRIVATE -fopenmp)
    target_compile_definitions(ERDOS PRIVATE USE_OPENMP)
endif()